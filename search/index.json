[{"content":" The content was outdated and would be updated in the near future. When I first ventured into the realm of C++, DEV C++ served as my initial Integrated Development Environment (IDE). It boasted simplicity and minimalism, making it particularly welcoming for beginners. However, at the time of its release, DEV\u0026rsquo;s GCC was stuck at C++11. The outdated user interface further dampened its appeal. There\u0026rsquo;s no point using a decade-old compiler and it\u0026rsquo;s outdated user interface. Nor does it have intellisense or any other modern IDE features. So I moved to Visual Studio, only to find it too complex and bloated for my taste.Visual Studio Code is the perfect middle ground for me. It\u0026rsquo;s lightweight, has intellisense, and supports the latest C++ standard. After struggling with the editor for a whole day, the GCC launch.json and tasks.json still failed to work in the integrated terminal. The external terminal launched was surprisingly slow. I had to shift my focus to MSVC.\nThe official MSVC documentation in VS Code proved to be not only sparse but also somewhat difficult to implement, demanding the opening of VS Code in Visual Studio Development Command Prompt/Powershell. Thanks to Futrime\u0026rsquo;s blog, I finally figured it out. Definitely check him out! However, there is room for improvement in both the tasks.json and the launch speed within the integrated terminal.\nIn his blog, Futrime introduced the window option in tasks.json to launch tasks in the integrated terminal using Developer Command Prompt for VS. However, it is unnecessary to execute every task in the VS prompt, as it proves slow and time-consuming. Adding the VSDevCmd.bat or DevShell.dll module to environmental variables is also discouraged due to potential system slowdowns. Instead, a more efficient approach involves pasting the full path of these files into the args option in tasks.json. Here\u0026rsquo;s an excerpt from my tasks.json:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;cl - C++\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;powershell.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;-Command\u0026#34;, \u0026#34;Import-Module \u0026#39;M:\\\\Coding\\\\.vscode\\\\Microsoft.VisualStudio.DevShell.dll\u0026#39;\u0026#34;, \u0026#34;;Enter-VsDevShell 0eeed396 -SkipAutomaticLocation\u0026#34;, \u0026#34;;cl.exe /TP /Zi /EHsc /std:c++latest /Zc:__cplusplus /Fo${fileDirname}\\\\output\\\\ /Fd${fileDirname}\\\\output\\\\ /Od /MP /W4 /Fe:${fileDirname}\\\\output\\\\${fileBasenameNoExtension}.exe /I${workspaceFolder}\\\\include\\\\ ${file}\u0026#34;, ], \u0026#34;problemMatcher\u0026#34;: [ \u0026#34;$msCompile\u0026#34; ], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, \u0026#34;presentation\u0026#34;: { \u0026#34;reveal\u0026#34;: \u0026#34;never\u0026#34;, \u0026#34;panel\u0026#34;: \u0026#34;shared\u0026#34;, \u0026#34;focus\u0026#34;: true, \u0026#34;close\u0026#34;: false }, }, Don\u0026rsquo;t scream. I understand this example may seem intricate, so let me break it down step by step.\ncommand is set to powershell.exe. args represents the arguments that the command will take. To obtain the launch command for your VSDevShell, open Windows Terminal, press CTRL + , to access settings, navigate to the VS Dev Powershell profile, and review your VSDevShell\u0026rsquo;s launch command. The specific command may vary between different VS versions. For me, it was:\n1 powershell.exe -NoExit -Command \u0026#34;\u0026amp;{Import-Module \u0026#34;\u0026#34;\u0026#34;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll\u0026#34;\u0026#34;\u0026#34;; Enter-VsDevShell 0eeed396 -SkipAutomaticLocation -DevCmdArguments \u0026#34;\u0026#34;\u0026#34;-arch=x64 -host_arch=x64\u0026#34;\u0026#34;\u0026#34;}\u0026#34; It might seem tempting to directly include this command in the args, but the challenge lies in the fact that args is not a simple string; it\u0026rsquo;s an array of strings. The most vexing part is that the integrated PowerShell launched by VS Code task does not recognize \u0026amp; as a command, and spaces in the path pose additional complications. The reason is unknown for me. Thus, I copied the dll module to a valid path and included it in the args. The cl.exe and its flags were also added to the args. However, the task would run endlessly, as VS Code\u0026rsquo;s task does not terminate unless the command does. Removing -NoExit ensures the task terminates, and there\u0026rsquo;s no need for ;exit at the end of the command.\nAlso, due to peculiarities in PowerShell, ; is not a valid separator if we put it separately or at the end of the command. Nor do the cl args in which has space. We have to put the whole command into a single string and separate the commands with ;. 0eeed396 is the hash of the VS 2022 Community Edition x64 Developer Powershell. -SkipAutomaticLocation is to prevent the shell from changing the current directory to the workspace folder.\nMy cl args targets the latest C++ standard, generates full debugging information, and outputs the object file, pdb file and the executable file to the output folder in the same directory as the source file.\nThen creates a launcher profile in the launch.json for debugging. Notice the type must be cppvsdbg rather than cppdbg. All done! Now you can press F5 to build and debug your C++ program in VS Code with MSVC without any hassle.\nPhoto by Visual Studio Code Team on Microsoft\n","date":"2024-02-17T13:17:25+08:00","image":"https://liautraver.github.io/p/using-msvc-in-visual-studio-code/vscode_hud48b5ccbde25e833b0fb3e0567d046fd_114937_120x120_fill_box_smart1_3.png","permalink":"https://liautraver.github.io/p/using-msvc-in-visual-studio-code/","title":"Using MSVC in Visual Studio Code"},{"content":"What is Docker? When developing applications, it is common to have different environments for development, testing, and production. This can lead to \u0026ldquo;it works only on my machine\u0026rdquo; problems. That\u0026rsquo;s why Docker comes in.\nAs its name, Docker adeptly encapsulates applications and their dependencies, ensuring seamless operation in any environment. This systematic approach not only addresses compatibility concerns but also streamlines the development and deployment processes with precision.\nUnpacking Containers vs. Virtual Machines We\u0026rsquo;re all acquainted with virtual machines like WSL on Windows – complete operating systems and applications running atop a hypervisor. However, they come with their fair share of challenges.\nVirtual machines tend to be resource-intensive, for each VM demands the entire operating system to be loaded and running, making them sizable and slow to start without a full-blown OS.\nOn the other hand, containers are a more efficient alternative when it comes to application development and deployment. Containers are lightweight and cozy up to the host system\u0026rsquo;s kernel. Unlike VMs, they don\u0026rsquo;t require a full operating system, resulting in more frugal consumption of resources such as CPU, memory, and storage. All containers share the same OS kernel. While macOS doesn\u0026rsquo;t naturally support containers, Docker for Mac ingeniously employs a Linux VM. On Windows, make sure to activate the Optional features Hyper-V and Containers to dive into the container magic.\nBuild and Run a Docker Container — Hello Docker To build a Docker container, simply create a Dockerfile which contains the instructions to build the container. For instance, I\u0026rsquo;ll show how to make a simple Docker image that runs a node.js application.\n1 2 # Create a new directory mkdir hello-docker \u0026amp;\u0026amp; cd hello-docker Create a new file named app.js and add the following content:\n1 console.log(\u0026#39;Hello, Docker!\u0026#39;); Dockerfiles: Crafting Your App\u0026rsquo;s Blueprint Docker builds and runs an image from a Dockerfile, which is a text file that contains all the commands a user could call on the command line to assemble an image. Think of it as the blueprint for your app\u0026rsquo;s ship. This cool text file is where you sketch out all the steps, just like a handy guide, for Docker to build and run your image, which also makes it possible to share your app with others without worrying about the environment.\nCreate a Dockerfile using Vim(or whatever) and add the following content:\n1 2 3 4 FROM node:alpine COPY . /app WORKDIR /app CMD node app.js Here\u0026rsquo;s a breakdown of the Dockerfile:\nFROM node:alpine — Use the official Node.js runtime as the base image. The alpine tag is a lightweight version of the Node.js image which only needs 150MiB storage more or less. Some Docker images are extremely large, but the alpine tag is a minimal image that\u0026rsquo;s perfect for small applications. COPY . /app — Copy the current directory to the /app directory in the image. The . refers to the current directory, and /app is the directory in the image. WORKDIR /app — Set the working directory to /app in the image. This is the directory where the command will be run. CMD node app.js — Run the node app.js command when the image is run. As for large applications, Dockerfile might be more complex, but just like CMake, we don\u0026rsquo;t need to know it comprehensively. Check the official documentation and learn when necessary.\nAll done! Now we can build the Docker image and run it.\n1 2 3 docker build -t hello-docker:test . # build the image named `hello-docker` with tag `test` docker image list # list all images docker run hello-docker:test # run the image The output should be:\n1 Hello, Docker! Congratulations! You\u0026rsquo;ve just built and run your first Docker container.🚀✨\nNote: Docker images aren\u0026rsquo;t stored in the current directory, but in the Docker daemon\u0026rsquo;s storage area.\n1 2 docker ps # list all running containers docker ps -a # list all containers Docker Hub Docker Hub is an official cloud-based registry service for Docker, just like GitHub for Git. It allows you to push and pull images from the cloud and share them with others.\n1 2 3 docker login # login to Docker Hub docker push hello-docker:test # push the image to Docker Hub docker pull hello-docker:test # pull the image from Docker Hub Run a Ubuntu Docker Container 1 docker run -it ubuntu:latest /bin/bash -it is a combination of -i and -t. -i stands for interactive, -t stands for terminal. It allows us to interact with the container. Otherwise, the container will exit immediately after running the command.\n","date":"2024-02-08T20:08:01+08:00","image":"https://liautraver.github.io/p/decoding-docker-enhancing-app-development/docker_hud3e45770d8e70da8696684a7b68bf000_15078_120x120_fill_box_smart1_3.png","permalink":"https://liautraver.github.io/p/decoding-docker-enhancing-app-development/","title":"Decoding Docker: Enhancing App Development"},{"content":"C++ Learning Notes const modifier after function declaration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class A { public: void foo() const; void foo(); // note: the const modifier is part of the function signature, that means, the two foo functions are different and overloadable. }; int main() { A a; a.foo(); // OK, if the class does not have the ordinary foo function, the const foo function will be called. it\u0026#39;s OK to call a const function on a non-const object. const A b; b.foo(); // OK b.foo(); // Error: no matching function for call to \u0026#39;A::foo() const\u0026#39; } The const keyword after a member function declaration means that the function is a \u0026ldquo;const member function \u0026ldquo;. This has two main implications:\nThe function can be called on const objects of the class, as well as on pointer/reference to const objects. Non-const member functions can only be called on non-const objects. Inside the function, the this pointer is treated as a const pointer, meaning you can\u0026rsquo;t modify the object\u0026rsquo;s data members (unless they are declared as mutable). So, you would typically make a member function const if it doesn\u0026rsquo;t need to modify the object, and you want to be able to call it on const objects. This is often the case for \u0026ldquo;getter\u0026rdquo; functions that just return the value of a data member, for example.\nmacro misc 1 2 3 #define STRINGIFY(x) #x #define TOSTRING(x) STRINGIFY(x) #define LINE_NUMBER TOSTRING(__LINE__) The reason for using two macros (STRINGIFY and TOSTRING) instead of one is due to the order of macro expansion in C++.\nWhen a macro is expanded, its arguments are not immediately expanded. They are first substituted as is into the macro body. Only after this substitution are they expanded.\nSo, if you directly use STRINGIFY(__LINE__), __LINE__ is substituted as is into the macro body, and you end up with the string \u0026quot;__LINE__\u0026quot; instead of the string representation of the current line number.\nBy using two macros (TOSTRING(x) and STRINGIFY(x)), you ensure that __LINE__ is fully expanded to the line number before it\u0026rsquo;s converted to a string. TOSTRING(__LINE__) first substitutes __LINE__ with the line number, and then STRINGIFY converts this number to a string.\n","date":"2024-02-05T17:17:25+08:00","permalink":"https://liautraver.github.io/p/c-learning-notes/","title":"C++ Learning Notes"},{"content":"Git work flow with GitHub Basics 1 git config --global init.defaultBranch main (or master) # set default branch initialize repo for the first time.\n1 git init now we just use git init.\n1 2 git add [file 1] [file 2] ... [file n] git add . // all files add files, i.e., stage files.\nmore 1 2 git restore --staged [file 1] [file 2] ... [file n] git restore --staged . // all files restore staged files,.\n1 2 git rm [file 1] [file 2] ... [file n] git rm . // all files. (you won\u0026#39;t do this, right?) delete some (tracked) files. which means removing files, you cannot find them in recycle bin! But we can retrieve them from the commit history.\nrename a file:\n1 git mv [old name] [new name] back to the flow 1 2 git commit -m \u0026#34;some commit info...\u0026#34; git commit -am \u0026#34;some commit info...\u0026#34; commit staged files.\n-a represents all staged files,namely, without using git add.\n1 git status check the status.\nStash is a good friend stash is a command that allows you to temporarily store changes that you don\u0026rsquo;t want to commit immediately. Stashing is handy if you need to quickly switch context and work on something else, but you\u0026rsquo;re mid-way through a code change and aren\u0026rsquo;t quite ready to commit.\nIn a word, stash save away changes. If you have multiple approaches to solve a problem, you can use stash to save the current approach and try another one, use stash to store each of them, and choose the best stash to apply.\n1 git stash save \u0026#34;some info...\u0026#34; simply stash some changes.\n1 git stash list list all stashes.\n1 git stash pop apply the latest stash and remove it from the stash list. if you want to apply a specific stash, use:\n1 git stash apply stash@{n} where n is the number of the stash you want to apply.\n1 git stash apply apply the latest stash and keep it in the stash list.\n1 git stash drop stash@{n} remove a specific stash from the stash list.\nBranch 1 git branch view all branches and show current branch, which has green color and an * attributes.\n1 git branch [new branch name] add a new branch.\n1 git switch [branch name] switch to a branch.\n1 git switch -c [new branch name] create a branch, and then switch to that branch.\n1 git merge -m [merge message] [branch] merge a branch to the current branch.\n1 2 git branch -d [branch name] git branch -D [branch name] -d : delete a branch.\n-D : force to delete a not fully merged branch.\n1 2 git branch -m [branch old name](optional) [branch name] git branch -M [branch old name](optional) [branch name] The -m option : rename a branch.\nThe -M option : forcefully rename a branch.\nIf the branch already exists, it will be replaced by the new one. This is different from the -m option, which will not replace an existing branch with the new one.\nIf the renamed branch has already been pushed to a remote repository, we need to push the renamed branch and reset the upstream branch:\nfor example, if the remote branch renamed from master to main, in local machine you should use:\n1 2 3 4 git branch -m master main git fetch origin git branch -u origin/main main git remote set-head origin -a Merge \u0026amp; Pull Request Local Git Merge When the forked branch meets the requirements, we can merge it to the main branch.\n1 2 git checkout main git merge [forked branch] if git shows: not something we can merge, here we may encounter some conflicts, it\u0026rsquo;s time to use git status to check the conflicts, and then edit the files to solve the conflicts. in VS Code, we can use merge editor to solve the conflicts in a more convenient way, i.e., VsSCode UI.\nGitHub Work Flow when everything up to date, we could create a pull request and add comments. GitHub will automatically check the conflicts. After solving the conflicts, we can merge the forked branch to the main branch.\nWhen merged but lots of differences still exist If there are lots of differences between the two branches, but git merge says \u0026lsquo;Already up to date\u0026rsquo;, it\u0026rsquo;s possible that the branches have diverged in a way that Git does not recognize as a simple forward or backward set of changes.This can happen if you\u0026rsquo;ve rebased one of the branches, or if you\u0026rsquo;ve force-pushed to a branch that\u0026rsquo;s been rebased by someone else.We can use:\n1 git diff [branch 1]..[branch 2] \u0026gt; [filename].patch This will create a file that contains all the changes from branch 2 that are not in branch 1.\nswitch to branch 1 and use:\n1 git apply [filename].patch if having conflicts, solve it. then commit and push. all done.\nhere\u0026rsquo;s another way:\n1 2 git checkout [branch 1] // switch to branch 1 git rebase [branch 2] // replay commits from branch 1 on top of branch 2, which means branch 1 will be updated to the latest commit of branch 2. do not misunderstand it. This will replay the commits from branch 1 on top of branch 2. If there are any conflicts, Git will pause and allow you to resolve them before continuing.\n1 2 3 git rebase --continue // or git rebase --skip // or git rebase --abort git will require you to do command above. Note: if abort, all uncommitted changes will be lost. so commit your work first!\nRename a branch locally 1 git branch -m [old name] [new name] # typically means `move` a branch Rename a branch both locally and remotely 1 2 git push origin :[old branch name] [new branch name] # delete old branch and create a new branch git push origin -u [new branch name] # set upstream Note: -u is a shorthand for --set--upstream.\nChange the default branch name (not recommended) 1 2 git branch -M [old branch name] [new branch name] git push origin -u [new branch name] Remote SSH \u0026amp; Repositories Create a GitHub remote repositories .githubignore\n:P\nCreate an SSH Windows in Windows, you should install Open-SSH in optional feature panel via settings first.\n1 2 Get-Service ssh-agent Start-Service ssh-agent and then\n1 2 3 4 ssh-keygen -t ed25519 -C \u0026#34;emailaddress\u0026#34; // using github-provided noreply email. ssh-add ~/.ssh/id_ed25519 # If system cannot find the path to the file, using absolute path. e.g. `C:\\Users\\[user.account.name]\\.ssh\\id_ed25519.pub`. Get-ChildItem -Path ~\\.ssh -Force # check if the file exists. Get-Content ~\\.ssh\\id_ed25519.pub | Set-Clipboard # copy the SSH public key to clipboard. Linux 1 2 3 4 5 sudo apt-get install ssh sudo apt-get install xclip # install xclip to copy text to clipboard. ssh-keygen -t ed25519 -C \u0026#34;emailaddress\u0026#34; ssh-add ~/.ssh/id_ed25519 xclip -sel clip \u0026lt; ~/.ssh/id_ed25519.pub Notes:\nThe number 25519 in id_ed25519 refers to the Ed25519 signature scheme, which is a specific algorithm for creating cryptographic signatures. This number is not arbitrary; it\u0026rsquo;s part of the name of the algorithm.\nEd25519 was designed to be a high-security, high-performance signature scheme. It uses elliptic curve cryptography, specifically the curve known as edwards25519 or Curve25519. The 25519 part of the name refers to the large prime number used in the mathematics of the curve, $2^{255}-19$.\nEd25519 has several advantages over other signature schemes such as RSA or ECDSA. It\u0026rsquo;s faster, more secure against various attacks, and generates shorter keys (the private key is 256 bits, and the public key is 128 bits).\nNavigating to GitHub settings - SSH and GPG keys, paste the SSH public key.\nWhen something goes wrong There were time when my SSH key was not working, and I got the following error message:\n1 Pushing to github.com:[user.name]/[repository.name].git ssh: connect to host github.com port 22: Connection timed out fatal: Could not read from remote repository. So far I do not exactly know why this happened, and I switched to https but it did not work either. After struggling for a whole night and checking out GitHub help, although the reason why the error happened is still unknown, I ultimately grasp the key to make it. Here I\u0026rsquo;m presenting the solution:\nFirst, check if the SSH key is working:\n1 ssh -T git@github.com and it shows:\n1 Hi [user.name]! You have successfully authenticated, but GitHub does not provide shell access. which means the SSH key is working.\nIf it shows Permission denied (publickey)., then the SSH key is not working. That\u0026rsquo;s another story, you may need to reinstall the SSH key or reconfigure the SSH key.\n1 vim ~/.ssh/config and add the following lines:\n1 2 3 4 Host github.com Hostname ssh.github.com Port 22 User git reset known_hosts:\n1 2 cp ~/.ssh/known_hosts ~/.ssh/known_hosts.bak # create a backup just in case vim ~/.ssh/known_hosts # delete the line of github.com; you can delete the whole file if you like. Then try push again, and you will be pushing to the remote repository with pleasure. Now you can breathe a sigh of relief and enjoy a cup of coffee.\nBasic Configurations 1 2 3 4 git config --global user.name [user.name] git config --global user.name // show global username git config --global user.email [user.email] git config --global user.email // show the global email origin is the default name Git gives to the server from where you cloned your repository. It\u0026rsquo;s essentially an alias for the URL of the remote repository. When you clone a repository, Git automatically creates a remote connection called origin pointing back to the original repository. This is used to fetch updates, push changes, and more.\nfirst time of the repo, we should:\n1 2 3 4 git remote add origin git@github.com:username/repositoryname.git git remote set-url origin git@github.com:username/repositoryname.git git remote -v # check if the remote is set correctly git push --set-upstream origin main The user.name is the name in GitHub, i.e. @username.\n1 2 git push --set-upstream origin [branch] # set upstream (remote) branch and push git branch --set-upstream-to=origin/[branch] [branch] # when the branch exists both locally and remotely The user.email must be public email of GitHub account, or may use GitHub-provided noreply account if email private.\n1 git push -u origin [branch] --verbose you should always use this command instead of git push --verbose when pushing a new branch to the remote.\nand then\n1 2 git fetch --verbose git merge --verbose or just:\n1 git pull --verbose git pull is essentially a git fetch followed by a git merge.\nNext time we just git push --verbose, not git push -u origin [branch] --verbose anymore.\nBreakdown of the command:\norigin: This is the default name Git gives to the server from where you cloned your repository. It\u0026rsquo;s essentially an alias for the URL of the remote repository. When you clone a repository, Git automatically creates a remote connection called origin pointing back to the original repository. This is used to fetch updates, push changes, and more.\nmain: This is the branch that you\u0026rsquo;re pushing to the origin remote. In many repositories, main is the default branch, but it could be named anything. When you run git push -u origin main, you\u0026rsquo;re saying \u0026ldquo;push the commits in the local branch named main to the remote named origin\u0026rdquo;.\n-u stands for \u0026ldquo;upstream\u0026rdquo;. This sets the upstream reference for the current branch. This means that in the future, you can simply type git push or git pull without specifying a branch, and Git will know that you mean origin/main.\n--verbose provides more detailed information about what\u0026rsquo;s happening during the push operation.\n1 2 3 4 git clone [url] --verbose # clone a repo, the main branch will be the default branch to clone. git clone --recursive [url] --verbose # clone a repo with all its submodules(aka. sub-repos) git clone --recurse-submodules [url] --verbose # same as above. git clone -b [branch] [url] --verbose # clone a specific branch. clone a repo. the repo will be a new folder. So you do not to create a new folder to store the repo.\nusually may not url, may ssh.\nlogs 1 2 3 4 git log // log overview git log --oneline // simplified log git log -p // details git diff [branch 1]...[branch 2] // show differences view logs. type q to exit view.\nRecovery Revert a merge restore to previous commit/stage is a good way to solve conflicts, however, it is more dangerous because it may cause data loss if used improperly.\nto revert a merge, first we should check out the desired revert commit ID/commit hash using git log, and then type:\n1 2 git revert -m 1 [commit-hash] git revert [commit-hash] -m 1 means revert to the first parent of the merge commit.\nRestore from local commit when lost changes due to improper use, first check the commit info:\n1 git reflog # short for `reference log`, which is a reference to the commits that are referenced by the tips of branches and tags. get all the commit hash, and then use:\n1 git checkout [commit-hash] to view the commit. if it is the desired commit, save it using:\n1 git checkout -b [new branch name] this will create a new branch and save the commit.\nRecover from remote repository first we should use git fetch origin to fetch the latest changes and then:\n1 git reset --hard origin/[branch name] we could try to compare the local and remote repository before recovery:\n1 git diff origin/[branch name] Remember, git reset --hard is a destructive operation. It permanently discards local changes and commits. Make sure you really want to discard your local changes before running this command. If you want to keep your local changes, consider using git stash or git branch to save them somewhere else before running git reset --hard.\n","date":"2024-02-04T00:00:36+08:00","permalink":"https://liautraver.github.io/p/git-tips/","title":"Git Tips"},{"content":"Overview of the Linux system root directory: /\ndirectory description /bin essential command binaries or programs /boot static files of the boot loader /dev device files (not the shorthand of development) /etc host-specific system-wide editable text configuration files (not the e.tc.) /home home directories for users /root home directory for the root user /lib shared libraries dependencies /var variable data files /tmp temporary files /usr user related programs and data /proc process information pseudo-filesystem /sys sysfs is a virtual file system provided by the Linux kernel /mnt temporarily mounted filesystems \u0026hellip; \u0026hellip; Useful commands Ubuntu list 1 2 3 4 5 6 ls // list files and directories ls -l // list files and directories with details ls -a // list all files and directories ls -lh // list files and directories with human readable format ls -lt // list files and directories by time touch [file] // create a file show file content 1 2 3 4 5 cat [file] // show file content less [file] // show file content with page more [file] // show file content with page, only support `down` head -n [file] // show the first n lines of file tail -n [file] // show the last n lines of file edit file 1 2 3 4 5 6 cat [file 1] \u0026gt; [file 2] // copy file 1 to file 2 cat [file 1] \u0026gt;\u0026gt; [file 2] // append file 1 to file 2 cat [file 1] [file 2] \u0026gt; [file 3] // combine file 1 and file 2 to file 3 echo \u0026#34;content\u0026#34; \u0026gt; [file] // write content to file echo \u0026#34;content\u0026#34; \u0026gt;\u0026gt; [file] // append content to file # the `\u0026gt;` `\u0026gt;\u0026gt;` applies to many commands, e.g., `ls -l \u0026gt; [file]`, which will write the output of `ls -l` to file permission denied when running a script 1 2 ls -l [file] // check permission chmod +x ./[file] // add execute permission apt: Advanced Package Tool a word: I don\u0026rsquo;t think it\u0026rsquo;s advanced\u0026hellip; :P\n1 2 3 4 5 sudo apt install build-essential sudo apt update sudo apt upgrade sudo apt full-upgrade sudo apt install \u0026lt;package\u0026gt; we need a cleanup sometimes\u0026hellip;\n1 2 3 4 5 6 7 sudo apt list --installed // list all installed packages sudo apt remove \u0026lt;package\u0026gt; sudo apt autoremove sudo apt autoclean sudo apt autopurge sudo journalctl --vacuum-time=nd // n \u0026gt; 0, remove system logs aptitude // interactive package manager purge removed packages 1 2 dpkg -l | grep \u0026#39;^rc\u0026#39; | awk \u0026#39;{print $2}\u0026#39; // list removed packages dpkg -l | grep \u0026#39;^rc\u0026#39; | awk \u0026#39;{print $2}\u0026#39; | xargs sudo dpkg --purge // purge removed packages restart service (usually after modifying configuration file) 1 2 source ~/.bashrc // apply changes in .bashrc sudo systemctl restart [service] when having multiple versions of a package for example, we have multiple versions of gcc installed, and we want to switch between them.\n1 2 sudo update-alternatives --config gcc // list all versions of gcc sudo update-alternatives --remove-all gcc // remove all versions of gcc(only remove the link, not the package) set gcc-13 as default:\n1 2 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 20 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 30 Ubuntu VM occupied too much space dispite not having much data in it Windows automatically allocates a certain amount of space for the VM, that means even if you clean up the VM, the space won\u0026rsquo;t be released. To solve this problem, we need to compact the VM.\nLaunch PowerShell as administrator, and run the following commands:\n1 2 3 cd \u0026#34;%userprofile%\\AppData\\Local\\Packages\\CanonicalGroupLimited.\u0026lt;Distro\u0026gt;\\LocalState\\\u0026#34; // go to the VM folder wsl --shutdown // shut down the VM optimize-vhd -Path .\\ext4.vhdx -Mode full // compact the VM check the space again, it should be fine now.\nwget: The non-interactive network downloader 1 wget \u0026lt;url\u0026gt; htop: interactive process viewer 1 2 free -h // show memory usage in human readable format, built-in htop // show all processes curl: transfer a URL 1 curl -O \u0026lt;url\u0026gt; scp: OpenSSH secure file copy (remote file copy program) add ssh key to remote server 1 2 scp [-C] [-i /path/to/your/pem] [-r] \u0026lt;user\u0026gt;@\u0026lt;host\u0026gt;:\u0026lt;folder\u0026gt; \u0026lt;local_folder\u0026gt; // remote to local scp [-C] [-i /path/to/your/pem] [-r] \u0026lt;local_folder\u0026gt; \u0026lt;user\u0026gt;@\u0026lt;host\u0026gt;:\u0026lt;folder\u0026gt; // local to remote if file path contains space, use `\u0026quot;\u0026rsquo; \u0026lsquo;\u0026quot;`` to wrap it\n1 scp ... \u0026lt;user\u0026gt;@\u0026lt;host\u0026gt;:\u0026#34;\u0026#39;/path/to/file which contains space\u0026#39;\u0026#34; if network broken, add -C to resume transfer.\nif you use pem file to log in, add -i /path/to/your/pem.\nif transfer a folder, add -r.\nif network isn\u0026rsquo;t stable, use rsync instead. rsync is a fast and extraordinarily versatile file copying tool.\nlearn when needed.\ntar: The GNU version of the tar archiving utility 1 2 tar -xvf [file] tar -cvf [file] [dir] zip: package and compress (archive) files into zip file 1 zip [file] [dir] unzip: list, test and extract compressed files in a ZIP archive 1 unzip [file] remote server management RAM less than it should be cloud server providers usually apply some RAM into kdump, which is used for debugging and error logging. we can disable it to get more RAM. in ubuntu system, we can disable it by:\n1 sudo vim /etc/default/grub we could see a bunch of lines,change the following lines value into 0:\n1 2 GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;\u0026#34; GRUB_CMDLINE_LINUX=\u0026#34;\u0026#34; then run:\n1 2 sudo update-grub sudo reboot re-login and check RAM again.it should be fine now.\nScreen: screen manager with VT100/ANSI terminal emulation Normally, when we run a script in a remote server, we need to keep the terminal open. If we close the connection, and login again,we won\u0026rsquo;t find the running script even using fg command. Screen can help us solve this problem.\nScreen is a full-screen window manager that multiplexes a physical terminal between several processes, typically interactive shells.\n1 2 3 4 screen -S [name] // create a screen screen -ls // list all screens screen -r [name] // resume a screen screen -d [name] // detach a screen can also use CTRL A chords to D to detach a screen. to scroll in a screen, use Ctrl + A chords to [ to enter copy mode, then use CTRL F,CTRL B to scroll front and back, q to quit(abort the copy mode).\nto run a script in a screen, just screen -S \u0026lt;name\u0026gt; ./\u0026lt;script\u0026gt;.\ninstall llvm-clang from source 1 2 3 4 5 6 7 8 $ git clone --depth 1 --branch llvmorg-12.0.1 https://github.com/llvm/llvm-project.git $ cmake -S llvm-project/llvm -B llvm-project/build \\ -DCMAKE_BUILD_TYPE=Release \\ -DLLVM_ENABLE_PROJECTS=all \\ -DCMAKE_CXX_COMPILER=clang++ \\ -DCMAKE_C_COMPILER=clang $ cmake --build llvm-project/build -j8 $ cmake --install llvm-project/build --prefix /usr/local # or somewhere else ","date":"2024-02-01T23:17:36+08:00","permalink":"https://liautraver.github.io/p/ubuntu-tips/","title":"Ubuntu Tips"},{"content":" 1 2 3 4 5 6 7 #include \u0026lt;❤️\u0026gt; import std; int main(){ std::println(\u0026#34;Hello, World!\u0026#34;); return 0; } Photo by Pawel Czerwinski on Unsplash\n","date":"2024-01-31T15:48:25+08:00","image":"https://liautraver.github.io/p/hello-world/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://liautraver.github.io/p/hello-world/","title":"Hello World"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] One line code block 1 \u0026lt;p\u0026gt;A paragraph\u0026lt;/p\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-09-07T00:00:00Z","permalink":"https://liautraver.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Stack has built-in support for math typesetting using KaTeX.\nIt\u0026rsquo;s not enabled by default side-wide, but you can enable it for individual posts by adding math: true to the front matter. Or you can enable it side-wide by adding math = true to the params.article section in config.toml.\nInline math This is an inline mathematical expression: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n1 $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ Block math $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n1 2 3 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi),e^{2 \\pi i \\xi x},d\\xi $$\n1 2 3 $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ ","date":"2023-08-24T00:00:00Z","permalink":"https://liautraver.github.io/p/math-typesetting/","title":"Math Typesetting"}]